"use strict";(self.webpackChunkneon_docs=self.webpackChunkneon_docs||[]).push([[7515],{7056:(r,e,o)=>{o.r(e),o.d(e,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var t=o(4848),n=o(8453);o(4182),o(1801),o(3012),o(7227),o(9489);const i={sidebar_position:7,displayed_sidebar:"operatorsdk",title:"Monitoring",hide_title:!1,hide_table_of_contents:!1,description:"Monitoring information.",keywords:["operator","sdk","metrics","prometheus","grafana","observability"],last_update:{author:"NEONFORGE Team"}},a="Monitoring",s={id:"operator-sdk/monitoring",title:"Monitoring",description:"Monitoring information.",source:"@site/docs/operator-sdk/monitoring.mdx",sourceDirName:"operator-sdk",slug:"/operator-sdk/monitoring",permalink:"/docs/operator-sdk/monitoring",draft:!1,unlisted:!1,editUrl:"https://github.com/nforgeio/documentation/edit/master/docs/operator-sdk/monitoring.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,displayed_sidebar:"operatorsdk",title:"Monitoring",hide_title:!1,hide_table_of_contents:!1,description:"Monitoring information.",keywords:["operator","sdk","metrics","prometheus","grafana","observability"],last_update:{author:"NEONFORGE Team"}},sidebar:"operatorsdk",previous:{title:"RBAC",permalink:"/docs/operator-sdk/rbac"},next:{title:"Operator Lifecycle Manager",permalink:"/docs/category/operator-lifecycle-manager"}},d={},c=[{value:"Metrics",id:"metrics",level:2},{value:"Grafana Dashboard",id:"grafana-dashboard",level:3},{value:"Tracing",id:"tracing",level:2}];function l(r){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,n.R)(),...r.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"monitoring",children:"Monitoring"}),"\n",(0,t.jsx)(e.h2,{id:"metrics",children:"Metrics"}),"\n",(0,t.jsx)(e.p,{children:"By default, operators will emit a collection of performance metrics for each\r\ncontroller."}),"\n",(0,t.jsx)(e.h3,{id:"grafana-dashboard",children:"Grafana Dashboard"}),"\n",(0,t.jsxs)(e.p,{children:["Here is a sample dashboard to get started:\r\n",(0,t.jsx)(e.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:o(36).A+"",children:"operator-dashboard.json"})]}),"\n",(0,t.jsx)(e.h2,{id:"tracing",children:"Tracing"}),"\n",(0,t.jsxs)(e.p,{children:["To enable OpenTelemetry tracing, there is a\r\n",(0,t.jsx)(e.code,{children:"AddKubernetesOperatorInstrumentation"})," extension method to the\r\n",(0,t.jsx)(e.code,{children:"TracerProviderBuilder"})," class."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'using Neon.Operator;\r\nusing OpenTelemetry;\r\nusing OpenTelemetry.Resources;\r\n\r\nvar builder = Sdk.CreateTracerProviderBuilder()\r\n                  .SetResourceBuilder(ResourceBuilder.CreateDefault()\r\n                  .AddService("my-operator", serviceVersion: "1.0.0"))\r\n                  .AddKubernetesOperatorInstrumentation()\r\n                  .AddOtlpExporter(\r\n                      options =>\r\n                      {\r\n                          options.ExportProcessorType         = ExportProcessorType.Batch;\r\n                          options.BatchExportProcessorOptions = new BatchExportProcessorOptions<Activity>();\r\n                          options.Endpoint                    = new Uri("otel-collector-uri");\r\n                          options.Protocol                    = OpenTelemetry.Exporter.OtlpExportProtocol.Grpc;\r\n                      })\r\n                  .Build();\n'})})]})}function p(r={}){const{wrapper:e}={...(0,n.R)(),...r.components};return e?(0,t.jsx)(e,{...r,children:(0,t.jsx)(l,{...r})}):l(r)}},36:(r,e,o)=>{o.d(e,{A:()=>t});const t=o.p+"assets/files/operator-dashboard-765e7573fcf8aa04929bd0a689e5c63d.json"}}]);