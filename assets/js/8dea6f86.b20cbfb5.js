"use strict";(self.webpackChunkneon_docs=self.webpackChunkneon_docs||[]).push([[590],{3905:(e,r,t)=>{t.d(r,{Zo:()=>l,kt:()=>b});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=n.createContext({}),p=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},l=function(e){var r=p(e.components);return n.createElement(c.Provider,{value:r},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(t),m=o,b=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return t?n.createElement(b,i(i({ref:r},l),{},{components:t})):n.createElement(b,i({ref:r},l))}));function b(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var s={};for(var c in r)hasOwnProperty.call(r,c)&&(s[c]=r[c]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=t[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4223:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var n=t(7462),o=(t(7294),t(3905));const a={sidebar_position:6,displayed_sidebar:"neonkube",title:"Monitoring",hide_title:!1,hide_table_of_contents:!1,description:"Monitoring information.",keywords:["neonkube kubernetes operator sdk metrics prometheus grafana"],last_update:{author:"Marcus Bowyer"}},i="Monitoring",s={unversionedId:"neonkube/operator-sdk/monitoring",id:"neonkube/operator-sdk/monitoring",title:"Monitoring",description:"Monitoring information.",source:"@site/docs/neonkube/operator-sdk/monitoring.mdx",sourceDirName:"neonkube/operator-sdk",slug:"/neonkube/operator-sdk/monitoring",permalink:"/docs/neonkube/operator-sdk/monitoring",draft:!1,editUrl:"https://github.com/nforgeio/documentation/edit/master/docs/neonkube/operator-sdk/monitoring.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,displayed_sidebar:"neonkube",title:"Monitoring",hide_title:!1,hide_table_of_contents:!1,description:"Monitoring information.",keywords:["neonkube kubernetes operator sdk metrics prometheus grafana"],last_update:{author:"Marcus Bowyer"}},sidebar:"neonkube",previous:{title:"RBAC",permalink:"/docs/neonkube/operator-sdk/rbac"},next:{title:"Best Practices",permalink:"/docs/neonkube/operator-sdk/best-practices"}},c={},p=[{value:"Metrics",id:"metrics",level:2},{value:"Grafana Dashboard",id:"grafana-dashboard",level:3},{value:"Tracing",id:"tracing",level:2}],l={toc:p},d="wrapper";function u(e){let{components:r,...a}=e;return(0,o.kt)(d,(0,n.Z)({},l,a,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"monitoring"},"Monitoring"),(0,o.kt)("h2",{id:"metrics"},"Metrics"),(0,o.kt)("p",null,"By default, operators will emit a collection of performance metrics for each controller."),(0,o.kt)("h3",{id:"grafana-dashboard"},"Grafana Dashboard"),(0,o.kt)("p",null,"Here is a sample dashboard to get started: ",(0,o.kt)("a",{target:"_blank",href:t(9203).Z},"operator-dashboard.json")),(0,o.kt)("h2",{id:"tracing"},"Tracing"),(0,o.kt)("p",null,"To enable OpenTelemetry tracing, there is a ",(0,o.kt)("inlineCode",{parentName:"p"},"AddKubernetesOperatorInstrumentation")," extension method to the ",(0,o.kt)("inlineCode",{parentName:"p"},"TracerProviderBuilder")," class."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'using Neon.Kube.Operator;\nusing OpenTelemetry;\nusing OpenTelemetry.Resources;\n\nvar builder = Sdk.CreateTracerProviderBuilder()\n                  .SetResourceBuilder(ResourceBuilder.CreateDefault()\n                  .AddService("my-operator", serviceVersion: "1.0.0"))\n                  .AddKubernetesOperatorInstrumentation()\n                  .AddOtlpExporter(\n                      options =>\n                      {\n                          options.ExportProcessorType         = ExportProcessorType.Batch;\n                          options.BatchExportProcessorOptions = new BatchExportProcessorOptions<Activity>();\n                          options.Endpoint                    = new Uri("otel-collector-uri");\n                          options.Protocol                    = OpenTelemetry.Exporter.OtlpExportProtocol.Grpc;\n                      })\n                  .Build();\n')))}u.isMDXComponent=!0},9203:(e,r,t)=>{t.d(r,{Z:()=>n});const n=t.p+"assets/files/operator-dashboard-765e7573fcf8aa04929bd0a689e5c63d.json"}}]);