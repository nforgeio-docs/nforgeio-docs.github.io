"use strict";(self.webpackChunkneon_docs=self.webpackChunkneon_docs||[]).push([[7838],{9915:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>r,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>d,toc:()=>l});var a=t(4848),n=t(8453);t(4182),t(1801),t(3012),t(7227),t(9489);const i={sidebar_position:2,displayed_sidebar:"operatorsdk",title:"Validating Webhooks",hide_title:!1,hide_table_of_contents:!1,description:"Validating Webhooks can validate resources when created/updated",keywords:["operator","sdk","resource","webhook","admission control","dynamic admission control","validating webhook"],last_update:{author:"NeonFORGE Team"}},s="Validating Webhooks",d={id:"operator-sdk/webhooks/validating-webhooks",title:"Validating Webhooks",description:"Validating Webhooks can validate resources when created/updated",source:"@site/docs/operator-sdk/webhooks/validating-webhooks.mdx",sourceDirName:"operator-sdk/webhooks",slug:"/operator-sdk/webhooks/validating-webhooks",permalink:"/docs/operator-sdk/webhooks/validating-webhooks",draft:!1,unlisted:!1,editUrl:"https://github.com/nforgeio/documentation/edit/master/docs/operator-sdk/webhooks/validating-webhooks.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,displayed_sidebar:"operatorsdk",title:"Validating Webhooks",hide_title:!1,hide_table_of_contents:!1,description:"Validating Webhooks can validate resources when created/updated",keywords:["operator","sdk","resource","webhook","admission control","dynamic admission control","validating webhook"],last_update:{author:"NeonFORGE Team"}},sidebar:"operatorsdk",previous:{title:"Mutating Webhooks",permalink:"/docs/operator-sdk/webhooks/mutating-webhooks"},next:{title:"Local Development",permalink:"/docs/operator-sdk/webhooks/local-dev"}},r={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Example",id:"example",level:2}];function c(e){const o={code:"code",h1:"h1",h2:"h2",mermaid:"mermaid",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(o.h1,{id:"validating-webhooks",children:"Validating Webhooks"}),"\n",(0,a.jsx)(o.h2,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsx)(o.p,{children:"Validating webhooks can be used to perform validations that go beyond the\ncapabilities of OpenAPI schema validation. A validating Webhook can reject the\nrequest, but it cannot modify the object received in the request."}),"\n",(0,a.jsx)(o.mermaid,{value:"flowchart TD\n    A[User] -- kubectl apply resource.yaml --\x3e K[Kubernetes API] --\x3e V{ValidatingWebhook} --\x3e B[Is it?]\n    B --\x3e|Ok| K\n    B --\x3e|Fail| K"}),"\n",(0,a.jsx)(o.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(o.pre,{children:(0,a.jsx)(o.code,{className:"language-csharp",children:'[Webhook(\n    name: "pod-policy.neonkube.io",\n    admissionReviewVersions: "v1",\n    failurePolicy: "Ignore")]\n[WebhookRule(\n    apiGroups: V1Pod.KubeGroup,\n    apiVersions: V1Pod.KubeApiVersion,\n    operations: AdmissionOperations.Create | AdmissionOperations.Update,\n    resources: V1Pod.KubePluralName,\n    scope: "*")]\npublic class PodWebhook : ValidatingWebhookBase<V1Pod>\n{\n    public override async Task<ValidationResult> CreateAsync(V1Pod entity, bool dryRun)\n    {\n        if (entity.Metadata.Name == "invalid-entity")\n        {\n            return ValidationResult.Fail(statusCode: 500, statusMessage: "Entity name is not valid.");\n        }\n\n        return ValidationResult.Success();\n    }\n\n    public override async Task<ValidationResult> UpdateAsync(V1Pod entity, V1Pod oldEntity, bool dryRun)\n    {\n        if (entity.Metadata.Name == "invalid-entity")\n        {\n            return ValidationResult.Fail(statusCode: 500, statusMessage: "Entity name is not valid.");\n        }\n\n        return ValidationResult.Success();\n    }\n}\n'})})]})}function u(e={}){const{wrapper:o}={...(0,n.R)(),...e.components};return o?(0,a.jsx)(o,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);