"use strict";(self.webpackChunkneon_docs=self.webpackChunkneon_docs||[]).push([[6884],{4220:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var s=r(4848),n=r(8453);r(4182),r(1801),r(3012),r(7227),r(9489);const i={sidebar_position:1,displayed_sidebar:"operatorsdk",title:"Unit Tests",hide_title:!1,hide_table_of_contents:!1,description:"How to write unit tests",keywords:["operator","sdk","test","unit","testing"],last_update:{author:"NeonFORGE Team"}},a="Writing Unit Tests",o={id:"operator-sdk/testing/unit-testing",title:"Unit Tests",description:"How to write unit tests",source:"@site/docs/operator-sdk/testing/unit-testing.mdx",sourceDirName:"operator-sdk/testing",slug:"/operator-sdk/testing/unit-testing",permalink:"/docs/operator-sdk/testing/unit-testing",draft:!1,unlisted:!1,editUrl:"https://github.com/nforgeio/documentation/edit/master/docs/operator-sdk/testing/unit-testing.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,displayed_sidebar:"operatorsdk",title:"Unit Tests",hide_title:!1,hide_table_of_contents:!1,description:"How to write unit tests",keywords:["operator","sdk","test","unit","testing"],last_update:{author:"NeonFORGE Team"}},sidebar:"operatorsdk",previous:{title:"Testing",permalink:"/docs/category/testing"},next:{title:"Best Practices",permalink:"/docs/operator-sdk/best-practices"}},u={},c=[{value:"Example",id:"example",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",pre:"pre",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"writing-unit-tests",children:"Writing Unit Tests"}),"\n",(0,s.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-csharp",children:'using k8s.Models;\r\nusing Neon.Operator.Xunit;\r\nusing Xunit;\r\n\r\npublic class Test_Operator : IClassFixture<TestOperatorFixture>\r\n{\r\n    private TestOperatorFixture fixture;\r\n\r\n    public Test_Operator(TestOperatorFixture fixture)\r\n    {\r\n        this.fixture = fixture;\r\n        fixture.Operator.AddController<TestDatabaseController>();\r\n        fixture.RegisterType<V1StatefulSet>();\r\n        fixture.RegisterType<V1Service>();\r\n        fixture.Start();\r\n    }\r\n\r\n    [Fact]\r\n    public async Task CreateStatefulSetAsync()\r\n    {\r\n        fixture.ClearResources();\r\n\r\n        var controller = fixture.Operator.GetController<TestDatabaseController>();\r\n\r\n        var resource = new V1TestDatabase()\r\n        {\r\n            Metadata = new V1ObjectMeta()\r\n            {\r\n                Name              = "test-database",\r\n                NamespaceProperty = "test"\r\n            },\r\n            Spec = new TestDatabaseSpec()\r\n            {\r\n                Image      = "foo/bar:latest",\r\n                Servers    = 3,\r\n                VolumeSize = "1Gi"\r\n            }\r\n        };\r\n\r\n        await controller.ReconcileAsync(resource);\r\n\r\n        var statefulsets = fixture.Resources.OfType<V1StatefulSet>();\r\n        var services     = fixture.Resources.OfType<V1Service>();\r\n\r\n        Assert.Equal(2, fixture.Resources.Count);\r\n\r\n        // verify statefulset\r\n        Assert.Contains(statefulsets, r => r.Metadata.Name == resource.Name());\r\n        Assert.Equal(resource.Spec.Servers, statefulsets.Single().Spec.Replicas);\r\n\r\n        // verify service\r\n        Assert.Contains(services, r => r.Metadata.Name == resource.Name());\r\n    }\r\n}\n'})})]})}function d(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);