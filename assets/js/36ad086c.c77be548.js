"use strict";(self.webpackChunkneon_docs=self.webpackChunkneon_docs||[]).push([[295],{4137:(e,t,o)=>{o.d(t,{Zo:()=>c,kt:()=>k});var n=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var d=n.createContext({}),l=function(e){var t=n.useContext(d),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},c=function(e){var t=l(e.components);return n.createElement(d.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,a=e.originalType,d=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(o),b=r,k=u["".concat(d,".").concat(b)]||u[b]||p[b]||a;return o?n.createElement(k,i(i({ref:t},c),{},{components:o})):n.createElement(k,i({ref:t},c))}));function k(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=o.length,i=new Array(a);i[0]=b;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<a;l++)i[l]=o[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,o)}b.displayName="MDXCreateElement"},7169:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=o(7462),r=(o(7294),o(4137));const a={sidebar_position:2,displayed_sidebar:"operatorsdk",title:"Validating Webhooks",hide_title:!1,hide_table_of_contents:!1,description:"Validating Webhooks can validate resources when created/updated.",keywords:["neonkube kubernetes operator sdk resource validating webhooks"],last_update:{author:"Marcus Bowyer"}},i="Validating Webhooks",s={unversionedId:"operator-sdk/webhooks/validating-webhooks",id:"operator-sdk/webhooks/validating-webhooks",title:"Validating Webhooks",description:"Validating Webhooks can validate resources when created/updated.",source:"@site/docs/operator-sdk/webhooks/validating-webhooks.mdx",sourceDirName:"operator-sdk/webhooks",slug:"/operator-sdk/webhooks/validating-webhooks",permalink:"/docs/operator-sdk/webhooks/validating-webhooks",draft:!1,editUrl:"https://github.com/nforgeio/documentation/edit/master/docs/operator-sdk/webhooks/validating-webhooks.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,displayed_sidebar:"operatorsdk",title:"Validating Webhooks",hide_title:!1,hide_table_of_contents:!1,description:"Validating Webhooks can validate resources when created/updated.",keywords:["neonkube kubernetes operator sdk resource validating webhooks"],last_update:{author:"Marcus Bowyer"}},sidebar:"operatorsdk",previous:{title:"Mutating Webhooks",permalink:"/docs/operator-sdk/webhooks/mutating-webhooks"},next:{title:"Local Development",permalink:"/docs/operator-sdk/webhooks/local-dev"}},d={},l=[{value:"Introduction",id:"introduction",level:2},{value:"Example",id:"example",level:2}],c={toc:l},u="wrapper";function p(e){let{components:t,...o}=e;return(0,r.kt)(u,(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"validating-webhooks"},"Validating Webhooks"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Validating webhooks can be used to perform validations that go beyond the capabilities of OpenAPI schema validation.\nA validating Webhook can reject the request, but it cannot modify the object received in the request."),(0,r.kt)("mermaid",{value:"flowchart TD\n    A[User] -- kubectl apply resource.yaml --\x3e K[Kubernetes API] --\x3e V{ValidatingWebhook} --\x3e B[Is it?]\n    B --\x3e|Ok| K\n    B --\x3e|Fail| K"}),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'[Webhook(\n    name: "pod-policy.neonkube.io",\n    admissionReviewVersions: "v1",\n    failurePolicy: "Ignore")]\n[WebhookRule(\n    apiGroups: V1Pod.KubeGroup,\n    apiVersions: V1Pod.KubeApiVersion,\n    operations: AdmissionOperations.Create | AdmissionOperations.Update,\n    resources: V1Pod.KubePluralName,\n    scope: "*")]\npublic class PodWebhook : IValidatingWebhook<V1Pod>\n{\n    public async Task<ValidationResult> CreateAsync(V1Pod entity, bool dryRun)\n    {\n        if (entity.Metadata.Name == "invalid-entity")\n        {\n            return ValidationResult.Fail(statusCode: 500, statusMessage: "Entity name is not valid.");\n        }\n\n        return ValidationResult.Success();\n    }\n\n    public async Task<ValidationResult> UpdateAsync(V1Pod entity, V1Pod oldEntity, bool dryRun)\n    {\n        if (entity.Metadata.Name == "invalid-entity")\n        {\n            return ValidationResult.Fail(statusCode: 500, statusMessage: "Entity name is not valid.");\n        }\n\n        return ValidationResult.Success();\n    }\n}\n')))}p.isMDXComponent=!0}}]);