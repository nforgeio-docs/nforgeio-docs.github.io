"use strict";(self.webpackChunkneon_docs=self.webpackChunkneon_docs||[]).push([[985],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>k});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=o.createContext({}),d=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=d(e.components);return o.createElement(l.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},b=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=d(t),b=a,k=c["".concat(l,".").concat(b)]||c[b]||p[b]||r;return t?o.createElement(k,i(i({ref:n},u),{},{components:t})):o.createElement(k,i({ref:n},u))}));function k(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=b;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var d=2;d<r;d++)i[d]=t[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}b.displayName="MDXCreateElement"},4927:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var o=t(7462),a=(t(7294),t(3905));const r={sidebar_position:6,displayed_sidebar:"neonkube",title:"Validating Webhooks",hide_title:!1,hide_table_of_contents:!1,description:"Validating Webhooks.",keywords:["neonkube kubernetes operator sdk resource validating webhooks"],last_update:{author:"Marcus Bowyer"}},i="Validating Webhooks",s={unversionedId:"neonkube/operator-sdk/validating-webhooks",id:"neonkube/operator-sdk/validating-webhooks",title:"Validating Webhooks",description:"Validating Webhooks.",source:"@site/docs/neonkube/operator-sdk/validating-webhooks.mdx",sourceDirName:"neonkube/operator-sdk",slug:"/neonkube/operator-sdk/validating-webhooks",permalink:"/docs/neonkube/operator-sdk/validating-webhooks",draft:!1,editUrl:"https://github.com/nforgeio/documentation/edit/master/docs/neonkube/operator-sdk/validating-webhooks.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,displayed_sidebar:"neonkube",title:"Validating Webhooks",hide_title:!1,hide_table_of_contents:!1,description:"Validating Webhooks.",keywords:["neonkube kubernetes operator sdk resource validating webhooks"],last_update:{author:"Marcus Bowyer"}},sidebar:"neonkube",previous:{title:"Mutating Webhooks",permalink:"/docs/neonkube/operator-sdk/mutating-webhooks"}},l={},d=[{value:"Example Validating Webhook",id:"example-validating-webhook",level:2}],u={toc:d};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"validating-webhooks"},"Validating Webhooks"),(0,a.kt)("h2",{id:"example-validating-webhook"},"Example Validating Webhook"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'[Webhook(\n    name: "pod-policy.neonkube.io",\n    serviceName: "example-operator",\n    @namespace: "default",\n    admissionReviewVersions: "v1",\n    failurePolicy: "Ignore")]\n[WebhookRule(\n    apiGroups: V1Pod.KubeGroup,\n    apiVersions: V1Pod.KubeApiVersion, \n    operations: AdmissionOperations.Create | AdmissionOperations.Update, \n    resources: V1Pod.KubePluralName,\n    scope: "*")]\npublic class PodWebhook : IValidatingWebhook<V1Pod>\n{\n    private Ilogger logger { get; set; }\n\n    public PodWebhook(Ilogger logger)\n        : base()\n    {\n        this.logger = logger;\n    }\n\n    public async Task<ValidationResult> CreateAsync(V1Pod entity, bool dryRun)\n    {\n        if (entity.Metadata.Name == "invalid-entity")\n        {\n            logger.LogInformation($"Entity name is not valid. [{entity.Namespace()}/{entity.Name()}]");\n\n            return ValidationResult.Fail(statusCode: 500, statusMessage: "Entity name is not valid.");\n        }\n\n        return ValidationResult.Success();\n    }\n\n    public async Task<ValidationResult> UpdateAsync(V1Pod entity, V1Pod oldEntity, bool dryRun)\n    {\n        if (entity.Metadata.Name == "invalid-entity")\n        {\n            logger.LogInformation($"Entity name is not valid. [{entity.Namespace()}/{entity.Name()}]");\n\n            return ValidationResult.Fail(statusCode: 500, statusMessage: "Entity name is not valid.");\n        }\n\n        return ValidationResult.Success();\n    }\n')))}c.isMDXComponent=!0}}]);