"use strict";(self.webpackChunkneon_docs=self.webpackChunkneon_docs||[]).push([[1310],{4137:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>b});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(r),d=a,b=c["".concat(s,".").concat(d)]||c[d]||m[d]||o;return r?n.createElement(b,i(i({ref:t},u),{},{components:r})):n.createElement(b,i({ref:t},u))}));function b(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1042:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=r(7462),a=(r(7294),r(4137));const o={sidebar_position:1,displayed_sidebar:"operatorsdk",title:"OLM Bundling Quickstart",hide_title:!1,hide_table_of_contents:!1,description:"How to write unit tests.",keywords:["operator","sdk","olm","operator lifecycle manager"],last_update:{author:"Marcus Bowyer"}},i="Operator Lifecycle Manager Integration Bundle",l={unversionedId:"operator-sdk/olm/olm-bundling-quickstart",id:"operator-sdk/olm/olm-bundling-quickstart",title:"OLM Bundling Quickstart",description:"How to write unit tests.",source:"@site/docs/operator-sdk/olm/olm-bundling-quickstart.mdx",sourceDirName:"operator-sdk/olm",slug:"/operator-sdk/olm/olm-bundling-quickstart",permalink:"/docs/operator-sdk/olm/olm-bundling-quickstart",draft:!1,editUrl:"https://github.com/nforgeio/documentation/edit/master/docs/operator-sdk/olm/olm-bundling-quickstart.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,displayed_sidebar:"operatorsdk",title:"OLM Bundling Quickstart",hide_title:!1,hide_table_of_contents:!1,description:"How to write unit tests.",keywords:["operator","sdk","olm","operator lifecycle manager"],last_update:{author:"Marcus Bowyer"}},sidebar:"operatorsdk",previous:{title:"Operator Lifecycle Manager",permalink:"/docs/category/operator-lifecycle-manager"},next:{title:"Testing",permalink:"/docs/category/testing"}},s={},p=[],u={toc:p},c="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(c,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"operator-lifecycle-manager-integration-bundle"},"Operator Lifecycle Manager Integration Bundle"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Neon.Operator")," package uses assembly attributes to configure the OLM\nbundle. The following is the minimum required list of assembly attributes to\ncreate an OLM bundle. The bundle will be created in the\n",(0,a.kt)("inlineCode",{parentName:"p"},"bin/OperatorLifecycleManager")," directory, but can be overridden using the\n",(0,a.kt)("inlineCode",{parentName:"p"},"NeonOperatorOlmOutputDir")," MSBuild property."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"NameAttribute")," - Sets the name of the operator."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"DisplayNameAttribute")," - Sets the display name of the operator."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"VersionAttribute")," - Sets the version of the operator. This can also be set\nusing the ",(0,a.kt)("inlineCode",{parentName:"li"},"NeonOperatorVersion")," MSBuild property."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"DescriptionAttribute")," - Sets the description of the operator."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"KeywordAttribute")," - Keywords for the operator."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"CategoryAttribute")," - Sets the category of the operator. These are flags and\ncan be combined."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"CapabilitiesAttribute")," - Sets the capabilities of the operator. These are\nflags and can be combined."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ContainerImageAttribute")," - Sets the container image of the operator."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"InstallModeAttribute")," - Sets the install modes of the operator. These are\nflags and can be combined."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ProviderAttribute")," - Sets the provider of the operator."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"MaintainerAttribute")," - Sets the maintainer of the operator. This can be\nrepeated to add multiple maintainers."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"IconAttribute")," - Sets the icon of the operator. This can be repeated to add\nmultiple icons."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"DefaultChannelAttribute")," - Sets the default channel of the operator."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"LinkAttribute")," - Sets the link of the operator.")),(0,a.kt)("p",null,"Here is an example of how to use these attributes:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'using Neon.Operator.Attributes;\nusing Neon.Operator.OperatorLifecycleManager;\n\n[assembly: Name("my-operator")]\n[assembly: DisplayName("My Operator")]\n[assembly: Version("1.2.3")]\n[assembly: Description(\n    ShortDescription = "short description",\n    FullDescription = "This is the full description.")]\n[assembly: Keyword("my", "example", "operator")]\n[assembly: Category(\n    Category = Category.DeveloperTools | Category.ApplicationRuntime)]\n[assembly: Capabilities(\n    Capability = CapabilityLevel.DeepInsights)]\n[assembly: ContainerImage(\n    Repository = "github.com/test-operator/cluster-operator",\n    Tag ="1.2.3")]\n[assembly: InstallMode(\n    Type = InstallModeType.OwnNamespace | InstallModeType.MultiNamespace,\n    Supported = true)]\n[assembly: Provider(Name = "Example")]\n[assembly: Maintainer(\n    Name = "Some Corp",\n    Email = "foo@bar.com")]\n[assembly: Icon(\n    Path = "icon.png",\n    MediaType = "image/png")]\n[assembly: DefaultChannel("stable")]\n[assembly: Link(Name = "GitHub", Url = "https://github.com/foo/bar")]\n')))}m.isMDXComponent=!0}}]);