"use strict";(self.webpackChunkneon_docs=self.webpackChunkneon_docs||[]).push([[6884],{4220:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=s(4848),n=s(8453);s(4182),s(1801),s(3012),s(7227),s(9489);const i={sidebar_position:1,displayed_sidebar:"operatorsdk",title:"Unit Tests",hide_title:!1,hide_table_of_contents:!1,description:"How to write unit tests",keywords:["operator","sdk","test","unit","testing"],last_update:{author:"NeonFORGE Team"}},a="Writing Unit Tests",o={id:"operator-sdk/testing/unit-testing",title:"Unit Tests",description:"How to write unit tests",source:"@site/docs/operator-sdk/testing/unit-testing.mdx",sourceDirName:"operator-sdk/testing",slug:"/operator-sdk/testing/unit-testing",permalink:"/docs/operator-sdk/testing/unit-testing",draft:!1,unlisted:!1,editUrl:"https://github.com/nforgeio/documentation/edit/master/docs/operator-sdk/testing/unit-testing.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,displayed_sidebar:"operatorsdk",title:"Unit Tests",hide_title:!1,hide_table_of_contents:!1,description:"How to write unit tests",keywords:["operator","sdk","test","unit","testing"],last_update:{author:"NeonFORGE Team"}},sidebar:"operatorsdk",previous:{title:"Testing",permalink:"/docs/category/testing"},next:{title:"Best Practices",permalink:"/docs/operator-sdk/best-practices"}},u={},c=[{value:"Example",id:"example",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",pre:"pre",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"writing-unit-tests",children:"Writing Unit Tests"}),"\n",(0,r.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'using k8s.Models;\nusing Neon.Operator.Xunit;\nusing Xunit;\n\npublic class Test_Operator : IClassFixture<TestOperatorFixture>\n{\n    private TestOperatorFixture fixture;\n\n    public Test_Operator(TestOperatorFixture fixture)\n    {\n        this.fixture = fixture;\n        fixture.Operator.AddController<TestDatabaseController>();\n        fixture.RegisterType<V1StatefulSet>();\n        fixture.RegisterType<V1Service>();\n        fixture.Start();\n    }\n\n    [Fact]\n    public async Task CreateStatefulSetAsync()\n    {\n        fixture.ClearResources();\n\n        var controller = fixture.Operator.GetController<TestDatabaseController>();\n\n        var resource = new V1TestDatabase()\n        {\n            Metadata = new V1ObjectMeta()\n            {\n                Name              = "test-database",\n                NamespaceProperty = "test"\n            },\n            Spec = new TestDatabaseSpec()\n            {\n                Image      = "foo/bar:latest",\n                Servers    = 3,\n                VolumeSize = "1Gi"\n            }\n        };\n\n        await controller.ReconcileAsync(resource);\n\n        var statefulsets = fixture.Resources.OfType<V1StatefulSet>();\n        var services     = fixture.Resources.OfType<V1Service>();\n\n        Assert.Equal(2, fixture.Resources.Count);\n\n        // verify statefulset\n        Assert.Contains(statefulsets, r => r.Metadata.Name == resource.Name());\n        Assert.Equal(resource.Spec.Servers, statefulsets.Single().Spec.Replicas);\n\n        // verify service\n        Assert.Contains(services, r => r.Metadata.Name == resource.Name());\n    }\n}\n'})})]})}function d(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);