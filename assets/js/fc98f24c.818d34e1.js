"use strict";(self.webpackChunkneon_docs=self.webpackChunkneon_docs||[]).push([[637],{4137:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(t),m=o,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||i;return t?r.createElement(f,a(a({ref:n},u),{},{components:t})):r.createElement(f,a({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[p]="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6697:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=t(7462),o=(t(7294),t(4137));const i={sidebar_position:5,displayed_sidebar:"neonkube",title:"Networking",hide_title:!1,hide_table_of_contents:!1,description:"Networking in NeonKUBE",keywords:["networking"],last_update:{author:"Marcus Bowyer"}},a="Networking",s={unversionedId:"neonkube/networking",id:"neonkube/networking",title:"Networking",description:"Networking in NeonKUBE",source:"@site/docs/neonkube/networking.mdx",sourceDirName:"neonkube",slug:"/neonkube/networking",permalink:"/docs/neonkube/networking",draft:!1,editUrl:"https://github.com/nforgeio/documentation/edit/master/docs/neonkube/networking.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,displayed_sidebar:"neonkube",title:"Networking",hide_title:!1,hide_table_of_contents:!1,description:"Networking in NeonKUBE",keywords:["networking"],last_update:{author:"Marcus Bowyer"}},sidebar:"neonkube",previous:{title:"Volumes and Storage",permalink:"/docs/neonkube/volumes-storage"},next:{title:"Security",permalink:"/docs/neonkube/security"}},c={},l=[{value:"Istio",id:"istio",level:2},{value:"Ingress",id:"ingress",level:3}],u={toc:l},p="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"networking"},"Networking"),(0,o.kt)("h2",{id:"istio"},"Istio"),(0,o.kt)("p",null,"Istio is an open source service mesh that provides a uniform way to connect, secure, control and\nobserve services running on Kubernetes clusters. By using Istio on neonKUBE clusters, developers can\nbenefit from advanced features such as traffic management, security policies, telemetry and\nobservability."),(0,o.kt)("h3",{id:"ingress"},"Ingress"),(0,o.kt)("p",null,"Ingress can be configured by creating ",(0,o.kt)("inlineCode",{parentName:"p"},"Gateway")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"VirtualService")," resources. All NeonKUBE clusters\nare configured with a secure ",(0,o.kt)("inlineCode",{parentName:"p"},"Gateway")," by default to allow users to get up and running quickly\nwithout having to manage DNS and certificates."),(0,o.kt)("p",null,"Here is an example ",(0,o.kt)("inlineCode",{parentName:"p"},"VirtualService")," that uses the default ",(0,o.kt)("inlineCode",{parentName:"p"},"neoncluster-gateway"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: example\n  namespace: default\nspec:\n  gateways:\n    - neon-ingress/neoncluster-gateway\n  hosts:\n    - example.CLUSTER_ID.neoncluster.io\n  http:\n    - match:\n        - uri:\n            prefix: /\n      route:\n        - destination:\n            host: example.default.svc.cluster.local\n            port:\n              number: 80\n")))}d.isMDXComponent=!0}}]);