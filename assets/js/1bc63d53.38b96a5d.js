"use strict";(self.webpackChunkneon_docs=self.webpackChunkneon_docs||[]).push([[6105],{4137:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>m});var n=r(7294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=u(r),f=s,m=p["".concat(c,".").concat(f)]||p[f]||d[f]||o;return r?n.createElement(m,a(a({ref:t},l),{},{components:r})):n.createElement(m,a({ref:t},l))}));function m(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=r.length,a=new Array(o);a[0]=f;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:s,a[1]=i;for(var u=2;u<o;u++)a[u]=r[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},9240:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var n=r(7462),s=(r(7294),r(4137));const o={sidebar_position:1,displayed_sidebar:"operatorsdk",title:"Unit Tests",hide_title:!1,hide_table_of_contents:!1,description:"How to write unit tests.",keywords:["operator","sdk","test","unit","testing"],last_update:{author:"Marcus Bowyer"}},a="Writing Unit Tests",i={unversionedId:"operator-sdk/testing/unit-testing",id:"operator-sdk/testing/unit-testing",title:"Unit Tests",description:"How to write unit tests.",source:"@site/docs/operator-sdk/testing/unit-testing.mdx",sourceDirName:"operator-sdk/testing",slug:"/operator-sdk/testing/unit-testing",permalink:"/docs/operator-sdk/testing/unit-testing",draft:!1,editUrl:"https://github.com/nforgeio/documentation/edit/master/docs/operator-sdk/testing/unit-testing.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,displayed_sidebar:"operatorsdk",title:"Unit Tests",hide_title:!1,hide_table_of_contents:!1,description:"How to write unit tests.",keywords:["operator","sdk","test","unit","testing"],last_update:{author:"Marcus Bowyer"}},sidebar:"operatorsdk",previous:{title:"Testing",permalink:"/docs/category/testing"},next:{title:"Best Practices",permalink:"/docs/operator-sdk/best-practices"}},c={},u=[{value:"Example",id:"example",level:2}],l={toc:u},p="wrapper";function d(e){let{components:t,...r}=e;return(0,s.kt)(p,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"writing-unit-tests"},"Writing Unit Tests"),(0,s.kt)("h2",{id:"example"},"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csharp"},'using k8s.Models;\nusing Neon.Operator.Xunit;\nusing Xunit;\n\npublic class Test_Operator : IClassFixture<TestOperatorFixture>\n{\n    private TestOperatorFixture fixture;\n\n    public Test_Operator(TestOperatorFixture fixture)\n    {\n        this.fixture = fixture;\n        fixture.Operator.AddController<TestDatabaseController>();\n        fixture.RegisterType<V1StatefulSet>();\n        fixture.RegisterType<V1Service>();\n        fixture.Start();\n    }\n\n    [Fact]\n    public async Task CreateStatefulSetAsync()\n    {\n        fixture.ClearResources();\n\n        var controller = fixture.Operator.GetController<TestDatabaseController>();\n\n        var resource = new V1TestDatabase()\n        {\n            Metadata = new V1ObjectMeta()\n            {\n                Name              = "test-database",\n                NamespaceProperty = "test"\n            },\n            Spec = new TestDatabaseSpec()\n            {\n                Image      = "foo/bar:latest",\n                Servers    = 3,\n                VolumeSize = "1Gi"\n            }\n        };\n\n        await controller.ReconcileAsync(resource);\n\n        var statefulsets = fixture.Resources.OfType<V1StatefulSet>();\n        var services     = fixture.Resources.OfType<V1Service>();\n\n        Assert.Equal(2, fixture.Resources.Count);\n\n        // verify statefulset\n        Assert.Contains(statefulsets, r => r.Metadata.Name == resource.Name());\n        Assert.Equal(resource.Spec.Servers, statefulsets.Single().Spec.Replicas);\n\n        // verify service\n        Assert.Contains(services, r => r.Metadata.Name == resource.Name());\n    }\n}\n')))}d.isMDXComponent=!0}}]);