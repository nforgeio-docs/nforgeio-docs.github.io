"use strict";(self.webpackChunkneon_docs=self.webpackChunkneon_docs||[]).push([[127],{4137:(e,r,n)=>{n.d(r,{Zo:()=>u,kt:()=>m});var t=n(7294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function c(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=t.createContext({}),s=function(e){var r=t.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},u=function(e){var r=s(e.components);return t.createElement(l.Provider,{value:r},e.children)},p="mdxType",b={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},d=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(n),d=o,m=p["".concat(l,".").concat(d)]||p[d]||b[d]||a;return n?t.createElement(m,i(i({ref:r},u),{},{components:n})):t.createElement(m,i({ref:r},u))}));function m(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var l in r)hasOwnProperty.call(r,l)&&(c[l]=r[l]);c.originalType=e,c[p]="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4331:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>b,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var t=n(7462),o=(n(7294),n(4137));const a={sidebar_position:4,displayed_sidebar:"neonkube",title:"RBAC",hide_title:!1,hide_table_of_contents:!1,description:"How to configure RBAC rules.",keywords:["neonkube kubernetes operator sdk resource rbac"],last_update:{author:"Marcus Bowyer"}},i="RBAC",c={unversionedId:"neonkube/operator-sdk/rbac",id:"neonkube/operator-sdk/rbac",title:"RBAC",description:"How to configure RBAC rules.",source:"@site/docs/neonkube/operator-sdk/rbac.mdx",sourceDirName:"neonkube/operator-sdk",slug:"/neonkube/operator-sdk/rbac",permalink:"/docs/neonkube/operator-sdk/rbac",draft:!1,editUrl:"https://github.com/nforgeio/documentation/edit/master/docs/neonkube/operator-sdk/rbac.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,displayed_sidebar:"neonkube",title:"RBAC",hide_title:!1,hide_table_of_contents:!1,description:"How to configure RBAC rules.",keywords:["neonkube kubernetes operator sdk resource rbac"],last_update:{author:"Marcus Bowyer"}},sidebar:"neonkube",previous:{title:"Finalizers",permalink:"/docs/neonkube/operator-sdk/finalizers"},next:{title:"Monitoring",permalink:"/docs/neonkube/operator-sdk/monitoring"}},l={},s=[{value:"Introduction",id:"introduction",level:2},{value:"Configuring RBAC rules",id:"configuring-rbac-rules",level:2},{value:"Example",id:"example",level:3},{value:"Generating RBAC manifests",id:"generating-rbac-manifests",level:3}],u={toc:s},p="wrapper";function b(e){let{components:r,...n}=e;return(0,o.kt)(p,(0,t.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"rbac"},"RBAC"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"Role-based access control (RBAC) is a method of regulating access to your Operator. When debugging, the Operator will automatically apply\nconfigured RBAC rules, and use them. This allows you to verify configuration before deployment."),(0,o.kt)("h2",{id:"configuring-rbac-rules"},"Configuring RBAC rules"),(0,o.kt)("p",null,"RBAC rules are configured by appling ",(0,o.kt)("inlineCode",{parentName:"p"},"RbacRule")," annotations to classes within the Operator project. They can be applied to any class including\n",(0,o.kt)("inlineCode",{parentName:"p"},"Controllers"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Finalizers")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Webhooks"),"."),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"using Neon.Kube.Operator.Rbac;\nusing Neon.Kube.Resources;\n\nnamespace ExampleOperator\n{\n    /// <summary>\n    /// Example controller\n    /// </summary>\n    [RbacRule<V1ExampleEntity>(Verbs = RbacVerb.All, Scope = EntityScope.Cluster)]\n    [RbacRule<V1ServiceAccount>(Verbs = RbacVerb.List | RbacVerb.Create, Scope = EntityScope.Cluster)]\n    [RbacRule<V1Pod>(Verbs = RbacVerb.Get | RbacVerb.Watch | RbacVerb.Patch, Scope = EntityScope.Namespaced)]\n    [RbacRule<V1ConfigMap>(Verbs = RbacVerb.Get | RbacVerb.Watch, Scope = EntityScope.Namespaced)]\n    public class ExampleController : IResourceController<V1ExampleEntity>\n    {\n        // your controller implementation\n    }\n}\n")),(0,o.kt)("h3",{id:"generating-rbac-manifests"},"Generating RBAC manifests"),(0,o.kt)("p",null,"Operators can generate RBAC manifests which can be applied using Helm, Kustomize, etc."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"operator.exe generate rbac\n")))}b.isMDXComponent=!0}}]);