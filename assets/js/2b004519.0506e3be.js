"use strict";(self.webpackChunkneon_docs=self.webpackChunkneon_docs||[]).push([[136],{6135:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var n=r(4848),o=r(8453);r(4182),r(1801),r(3012),r(7227),r(9489);const i={sidebar_position:1,displayed_sidebar:"operatorsdk",title:"OLM Bundling Quickstart",hide_title:!1,hide_table_of_contents:!1,description:"How to write unit tests",keywords:["operator","sdk","olm","operator lifecycle manager"],last_update:{author:"NeonFORGE Team"}},s="Operator Lifecycle Manager Integration Bundle",a={id:"operator-sdk/olm/olm-bundling-quickstart",title:"OLM Bundling Quickstart",description:"How to write unit tests",source:"@site/docs/operator-sdk/olm/olm-bundling-quickstart.mdx",sourceDirName:"operator-sdk/olm",slug:"/operator-sdk/olm/olm-bundling-quickstart",permalink:"/docs/operator-sdk/olm/olm-bundling-quickstart",draft:!1,unlisted:!1,editUrl:"https://github.com/nforgeio/documentation/edit/master/docs/operator-sdk/olm/olm-bundling-quickstart.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,displayed_sidebar:"operatorsdk",title:"OLM Bundling Quickstart",hide_title:!1,hide_table_of_contents:!1,description:"How to write unit tests",keywords:["operator","sdk","olm","operator lifecycle manager"],last_update:{author:"NeonFORGE Team"}},sidebar:"operatorsdk",previous:{title:"Operator Lifecycle Manager",permalink:"/docs/category/operator-lifecycle-manager"},next:{title:"Testing",permalink:"/docs/category/testing"}},l={},d=[];function c(e){const t={code:"code",h1:"h1",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"operator-lifecycle-manager-integration-bundle",children:"Operator Lifecycle Manager Integration Bundle"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"Neon.Operator"})," package uses assembly attributes to configure the OLM\nbundle. The following is the minimum required list of assembly attributes to\ncreate an OLM bundle. The bundle will be created in the\n",(0,n.jsx)(t.code,{children:"bin/OperatorLifecycleManager"})," directory, but can be overridden using the\n",(0,n.jsx)(t.code,{children:"NeonOperatorOlmOutputDir"})," MSBuild property."]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"NameAttribute"})," - Sets the name of the operator."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"DisplayNameAttribute"})," - Sets the display name of the operator."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"VersionAttribute"})," - Sets the version of the operator. This can also be set\nusing the ",(0,n.jsx)(t.code,{children:"NeonOperatorVersion"})," MSBuild property."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"DescriptionAttribute"})," - Sets the description of the operator."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"KeywordAttribute"})," - Keywords for the operator."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"CategoryAttribute"})," - Sets the category of the operator. These are flags and\ncan be combined."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"CapabilitiesAttribute"})," - Sets the capabilities of the operator. These are\nflags and can be combined."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"ContainerImageAttribute"})," - Sets the container image of the operator."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"InstallModeAttribute"})," - Sets the install modes of the operator. These are\nflags and can be combined."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"ProviderAttribute"})," - Sets the provider of the operator."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"MaintainerAttribute"})," - Sets the maintainer of the operator. This can be\nrepeated to add multiple maintainers."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"IconAttribute"})," - Sets the icon of the operator. This can be repeated to add\nmultiple icons."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"DefaultChannelAttribute"})," - Sets the default channel of the operator."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"LinkAttribute"})," - Sets the link of the operator."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Here is an example of how to use these attributes:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-csharp",children:'using Neon.Operator.Attributes;\nusing Neon.Operator.OperatorLifecycleManager;\n\n[assembly: Name("my-operator")]\n[assembly: DisplayName("My Operator")]\n[assembly: Version("1.2.3")]\n[assembly: Description(\n    ShortDescription = "short description",\n    FullDescription = "This is the full description.")]\n[assembly: Keyword("my", "example", "operator")]\n[assembly: Category(\n    Category = Category.DeveloperTools | Category.ApplicationRuntime)]\n[assembly: Capabilities(\n    Capability = CapabilityLevel.DeepInsights)]\n[assembly: ContainerImage(\n    Repository = "github.com/test-operator/cluster-operator",\n    Tag ="1.2.3")]\n[assembly: InstallMode(\n    Type = InstallModeType.OwnNamespace | InstallModeType.MultiNamespace,\n    Supported = true)]\n[assembly: Provider(Name = "Example")]\n[assembly: Maintainer(\n    Name = "Some Corp",\n    Email = "foo@bar.com")]\n[assembly: Icon(\n    Path = "icon.png",\n    MediaType = "image/png")]\n[assembly: DefaultChannel("stable")]\n[assembly: Link(Name = "GitHub", Url = "https://github.com/foo/bar")]\n'})})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}}}]);