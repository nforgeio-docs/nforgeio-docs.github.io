"use strict";(self.webpackChunkneon_docs=self.webpackChunkneon_docs||[]).push([[3550],{6447:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>t,metadata:()=>i,toc:()=>a});var o=r(4848),s=r(8453);r(4182),r(1801),r(3012),r(7227),r(9489);const t={sidebar_position:3,displayed_sidebar:"operatorsdk",title:"Controllers",hide_title:!1,hide_table_of_contents:!1,description:"Resource Controllers are responsible for reconciling resources",keywords:["operator","sdk","crd","crds","custom resource","resource controller"],last_update:{author:"NeonFORGE Team"}},l="Resource Controllers",i={id:"operator-sdk/controllers",title:"Controllers",description:"Resource Controllers are responsible for reconciling resources",source:"@site/docs/operator-sdk/controllers.mdx",sourceDirName:"operator-sdk",slug:"/operator-sdk/controllers",permalink:"/docs/operator-sdk/controllers",draft:!1,unlisted:!1,editUrl:"https://github.com/nforgeio/documentation/edit/master/docs/operator-sdk/controllers.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,displayed_sidebar:"operatorsdk",title:"Controllers",hide_title:!1,hide_table_of_contents:!1,description:"Resource Controllers are responsible for reconciling resources",keywords:["operator","sdk","crd","crds","custom resource","resource controller"],last_update:{author:"NeonFORGE Team"}},sidebar:"operatorsdk",previous:{title:"Getting Started",permalink:"/docs/operator-sdk/getting-started"},next:{title:"Webhooks",permalink:"/docs/category/webhooks"}},c={},a=[{value:"Introduction",id:"introduction",level:2},{value:"Reconciler",id:"reconciler",level:2},{value:"Triggers",id:"triggers",level:3},{value:"Example",id:"example",level:3},{value:"Status Updates",id:"status-updates",level:2},{value:"Requeuing",id:"requeuing",level:2},{value:"Global defaults",id:"global-defaults",level:3},{value:"Controller specific",id:"controller-specific",level:3},{value:"Manual requeue",id:"manual-requeue",level:3},{value:"Leader election",id:"leader-election",level:2},{value:"Events",id:"events",level:3},{value:"Configuring",id:"configuring",level:3},{value:"Filtering",id:"filtering",level:2},{value:"Field Selectors",id:"field-selectors",level:3},{value:"Label Selectors",id:"label-selectors",level:3},{value:"Dependent Resources",id:"dependent-resources",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",mermaid:"mermaid",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"resource-controllers",children:"Resource Controllers"}),"\n",(0,o.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsx)(n.p,{children:"Resource Controllers are called when Kubernetes resources are created, modified,\nor deleted. They are configured to watch specific resource types, have methods\nfor responding to such updates."}),"\n",(0,o.jsx)(n.mermaid,{value:"flowchart TD\n    A[User] -- kubectl apply resource.yaml --\x3e K{Kubernetes API}\n    C[ResourceManager] -- watch resources --\x3e K\n    C -- schedule resource --\x3e R[Reconciler]\n    R -- result --\x3e C\n    R -- update state --\x3e K"}),"\n",(0,o.jsx)(n.h2,{id:"reconciler",children:"Reconciler"}),"\n",(0,o.jsx)(n.p,{children:"Reconcilers are responsible for bringing the actual state of a resource to the\ndesired state, which is expressed in the Custom Resource object specification."}),"\n",(0,o.jsx)(n.p,{children:"When a reconcile event is triggered, it is always passed the current state of\nthe resource to be reconciled."}),"\n",(0,o.jsxs)(n.admonition,{type:"danger",children:[(0,o.jsx)(n.mdxAdmonitionTitle,{}),(0,o.jsxs)(n.p,{children:["A reconciler must be\n",(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Idempotence",children:"idempotent"})]}),(0,o.jsx)(n.p,{children:"A function is said to be idempotent if it can be applied multiple times without\nchanging the result beyond the initial application."})]}),"\n",(0,o.jsx)(n.h3,{id:"triggers",children:"Triggers"}),"\n",(0,o.jsx)(n.p,{children:"Reconcile is triggered by the following events:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"A resource has been created."}),"\n",(0,o.jsx)(n.li,{children:"A resource has been updated."}),"\n",(0,o.jsx)(n.li,{children:"A resource failed reconciliation and was requeued."}),"\n",(0,o.jsxs)(n.li,{children:["An object with an\n",(0,o.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/overview/working-with-objects/owners-dependents/#owner-references-in-object-specifications",children:(0,o.jsx)(n.code,{children:"ownerReference"})}),"\nto the resource."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,o.jsxs)(n.p,{children:["In its simplest form, this is what the ",(0,o.jsx)(n.code,{children:"ReconcileAsync"})," method looks like:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"using Neon.Operator;\nusing Neon.Operator.Controllers;\n\npublic class ExampleController : ResourceControllerBase<V1ExampleEntity>\n{\n    public override async Task<ResourceControllerResult> ReconcileAsync(V1ExampleEntity resource)\n    {\n        // TODO: apply logic\n\n        return ResourceControllerResult.Ok();\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"status-updates",children:"Status Updates"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"StatusModifiedAsync"})," is called when the status of a resource has changed."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"public override async Task StatusModifiedAsync(V1ExampleEntity resource)\n{\n    // react to status update\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"requeuing",children:"Requeuing"}),"\n",(0,o.jsx)(n.p,{children:"When a reconcile event throws an exception, it will be requeued."}),"\n",(0,o.jsx)(n.h3,{id:"global-defaults",children:"Global defaults"}),"\n",(0,o.jsxs)(n.p,{children:["Global defaults can be configured by setting ",(0,o.jsx)(n.code,{children:"ResourceManagerOptions"})," in\n",(0,o.jsx)(n.code,{children:"ConfigureOperator"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"var k8s = KubernetesOperatorHost\n            .CreateDefaultBuilder()\n            .ConfigureOperator(configure =>\n            {\n                configure.ResourceManagerOptions = new ResourceManagerOptions()\n                {\n                    ErrorMaxRequeueInterval = TimeSpan.FromMinutes(1),\n                    ErrorMaxRetryCount      = 10,\n                    ErrorMinRequeueInterval = TimeSpan.FromSeconds(1)\n                };\n            })\n            .UseStartup<Startup>()\n            .Build();\n\nawait = k8s.RunAsync();\n"})}),"\n",(0,o.jsx)(n.h3,{id:"controller-specific",children:"Controller specific"}),"\n",(0,o.jsxs)(n.p,{children:["Controllers are configurable by passing ",(0,o.jsx)(n.code,{children:"ResourceManagerOptions"})," to your\ncontroller when calling ",(0,o.jsx)(n.code,{children:"AddController"})," in ",(0,o.jsx)(n.code,{children:"Startup.cs"}),"."]}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["To do this manual configuration, automatic configuration should be disabled by\nadding the ",(0,o.jsx)(n.code,{children:"[Controller(Ignore = true)]"})," attribute to the controller."]})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"using Neon.Operator;\nusing Neon.Operator.ResourceManager;\n\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddKubernetesOperator()\n            .AddController<ExampleController>(\n            options: new ResourceManagerOptions()\n            {\n                ErrorMaxRequeueInterval = TimeSpan.FromMinutes(1),\n                ErrorMaxRetryCount      = 10,\n                ErrorMinRequeueInterval = TimeSpan.FromSeconds(1)\n            });\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"manual-requeue",children:"Manual requeue"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"public override async Task<ResourceControllerResult> ReconcileAsync(V1ExampleEntity resource)\n{\n    return ResourceControllerResult.RequeueEvent(TimeSpan.FromSeconds(10));\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"leader-election",children:"Leader election"}),"\n",(0,o.jsx)(n.h3,{id:"events",children:"Events"}),"\n",(0,o.jsx)(n.p,{children:"The following methods are provided for reacting to leadership events."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"public override async Task OnPromotionAsync()\n{\n    // Controller was promoted to leader.\n}\n\npublic override async Task OnDemotionAsync()\n{\n    // Controller is no longer leader.\n}\n\npublic override async Task OnNewLeaderAsyncc(string identity)\n{\n    // There is a new leader. The identity of the new leader is given.\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"configuring",children:"Configuring"}),"\n",(0,o.jsxs)(n.p,{children:["Leader election can be configured by setting ",(0,o.jsx)(n.code,{children:"LeaderElectionConfig"})," when adding\na controller via ",(0,o.jsx)(n.code,{children:"AddController"})," in ",(0,o.jsx)(n.code,{children:"Startup.cs"}),"."]}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["To do this manual configuration, automatic configuration should be disabled by\nadding the ",(0,o.jsx)(n.code,{children:"[Controller(Ignore = true)]"})," attribute to the controller."]})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'using Neon.Operator;\n\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddKubernetesOperator()\n            .AddController<ExampleController>(\n                leaderConfig: new LeaderElectionConfig(\n                    k8s:           K8s,\n                    @namespace:    "default",\n                    leaseName:     $"example.controller",\n                    identity:      Pod.Name))\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"filtering",children:"Filtering"}),"\n",(0,o.jsxs)(n.p,{children:["Filtering resources can be achieved by applying\n",(0,o.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/overview/working-with-objects/field-selectors/",children:"field selectors"}),"\nand/or\n",(0,o.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/",children:"label selectors"}),".\nBoth label selectors and field selectors are comma-separated ",(0,o.jsx)(n.code,{children:"key=value"}),"\nstrings."]}),"\n",(0,o.jsx)(n.h3,{id:"field-selectors",children:"Field Selectors"}),"\n",(0,o.jsxs)(n.p,{children:["Field selectors can be set either by the ",(0,o.jsx)(n.code,{children:"Controller"})," attribute, or by the\n",(0,o.jsx)(n.code,{children:"ResourceManagerOptions.FieldSelector"})," property."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'[Controller(FieldSelector = "metadata.name=my-resource")]\npublic class ExampleController : ResourceControllerBase<ExampleResource>\n\n'})}),"\n",(0,o.jsx)(n.h3,{id:"label-selectors",children:"Label Selectors"}),"\n",(0,o.jsxs)(n.p,{children:["Field selectors can be set either by the ",(0,o.jsx)(n.code,{children:"Controller"})," attribute, or by the\n",(0,o.jsx)(n.code,{children:"ResourceManagerOptions.FieldSelector"})," property."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'[Controller(LabelSelector = "neonkube.io/managed-by=my-operator,neonkube.io/controlled-by=example-controller")]\npublic class ExampleController : ResourceControllerBase<ExampleResource>\n\n'})}),"\n",(0,o.jsx)(n.h2,{id:"dependent-resources",children:"Dependent Resources"}),"\n",(0,o.jsxs)(n.p,{children:["In many cases, an operator creates a bunch of Kubernetes resources in the\ncluster, as a result of reconciling a ",(0,o.jsx)(n.code,{children:"Resource"}),". For instance, the\netcd-operator creates two services and a number of pods for a single EtcdCluster\nCR. In this case, all the Kubernetes resources created by the operator for a CR\nis defined as dependent resources. The etcd-operator may want to watch the pods\nthat it created in case it needs to reconcile again."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"DependentResources"})," can be defined by adding an annotation to the ",(0,o.jsx)(n.code,{children:"Controller"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"using Neon.Operator;\nusing Neon.Operator.Controllers;\n\n[DependentResource<V1Pod>]\n[DependentResource<V1Service>]\npublic class EtcdController : ResourceControllerBase<V1EtcdCluster>\n{\n   // Controller implementation.\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Controllers are configurable by setting ",(0,o.jsx)(n.code,{children:"DependentResources"})," in\n",(0,o.jsx)(n.code,{children:"ResourceManagerOptions"})," when adding a controller via ",(0,o.jsx)(n.code,{children:"AddController"})," in\n",(0,o.jsx)(n.code,{children:"Startup.cs"}),"."]}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["To do this manual configuration, automatic configuration should be disabled by\nadding the ",(0,o.jsx)(n.code,{children:"[Controller(Ignore = true)]"})," attribute to the controller."]})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"using Neon.Operator;\nusing Neon.Operator.ResourceManager;\n\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddKubernetesOperator()\n        .AddController<EtcdController>(\n            options: new ResourceManagerOptions()\n            {\n                DependentResources = new List<IDependentResource>()\n                {\n                    new DependentResource<V1Pod>(),\n                    new DependentResource<V1Service>()\n                }\n            });\n}\n\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);