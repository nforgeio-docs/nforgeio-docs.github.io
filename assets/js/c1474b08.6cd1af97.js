"use strict";(self.webpackChunkneon_docs=self.webpackChunkneon_docs||[]).push([[369],{3905:(e,n,r)=>{r.d(n,{Zo:()=>u,kt:()=>g});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=t.createContext({}),c=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},u=function(e){var n=c(e.components);return t.createElement(s.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(r),m=o,g=p["".concat(s,".").concat(m)]||p[m]||d[m]||a;return r?t.createElement(g,i(i({ref:n},u),{},{components:r})):t.createElement(g,i({ref:n},u))}));function g(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=r[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},421:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var t=r(7462),o=(r(7294),r(3905));const a={sidebar_position:3,displayed_sidebar:"neonkube",title:"Controllers",hide_title:!1,hide_table_of_contents:!1,description:"Resource Controllers are responsible for reconciling resources.",keywords:["neonkube kubernetes operator sdk resource controllers"],last_update:{author:"Marcus Bowyer"}},i="Resource Controllers",l={unversionedId:"neonkube/operator-sdk/controllers",id:"neonkube/operator-sdk/controllers",title:"Controllers",description:"Resource Controllers are responsible for reconciling resources.",source:"@site/docs/neonkube/operator-sdk/controllers.mdx",sourceDirName:"neonkube/operator-sdk",slug:"/neonkube/operator-sdk/controllers",permalink:"/docs/neonkube/operator-sdk/controllers",draft:!1,editUrl:"https://github.com/nforgeio/documentation/edit/master/docs/neonkube/operator-sdk/controllers.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,displayed_sidebar:"neonkube",title:"Controllers",hide_title:!1,hide_table_of_contents:!1,description:"Resource Controllers are responsible for reconciling resources.",keywords:["neonkube kubernetes operator sdk resource controllers"],last_update:{author:"Marcus Bowyer"}},sidebar:"neonkube",previous:{title:"Getting Started",permalink:"/docs/neonkube/operator-sdk/getting-started"},next:{title:"Webhooks",permalink:"/docs/category/webhooks"}},s={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Reconciler",id:"reconciler",level:2},{value:"Triggers",id:"triggers",level:3},{value:"Example",id:"example",level:3},{value:"Status Updates",id:"status-updates",level:2},{value:"Requeuing",id:"requeuing",level:2},{value:"Global defaults",id:"global-defaults",level:3},{value:"Controller specific",id:"controller-specific",level:3},{value:"Manual requeue",id:"manual-requeue",level:3},{value:"Leader election",id:"leader-election",level:2},{value:"Events",id:"events",level:3},{value:"Configuring",id:"configuring",level:3},{value:"Filtering",id:"filtering",level:2},{value:"Dependent Resources",id:"dependent-resources",level:2}],u={toc:c},p="wrapper";function d(e){let{components:n,...r}=e;return(0,o.kt)(p,(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"resource-controllers"},"Resource Controllers"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"Resource Controllers are called when Kubernetes resources are created, modified, or deleted.\nThey are configured to watch specific resource types, have methods for responding to such updates."),(0,o.kt)("mermaid",{value:"flowchart TD\n    A[User] -- kubectl apply resource.yaml --\x3e K{Kubernetes API}\n    C[ResourceManager] -- watch resources --\x3e K\n    C -- schedule resource --\x3e R[Reconciler]\n    R -- result --\x3e C\n    R -- update state --\x3e K"}),(0,o.kt)("h2",{id:"reconciler"},"Reconciler"),(0,o.kt)("p",null,"Reconcilers are responsible for bringing the actual state of a resource to the desired state, which is expressed in the\nCustom Resource object specification."),(0,o.kt)("p",null,"When a reconcile event is triggered, it is always passed the current state of the resource to be reconciled."),(0,o.kt)("admonition",{type:"danger"},(0,o.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"A reconciler must be ",(0,o.kt)("a",{parentName:"mdxAdmonitionTitle",href:"https://en.wikipedia.org/wiki/Idempotence"},"idempotent")),(0,o.kt)("p",{parentName:"admonition"},"A function is said to be idempotent if it can be applied multiple times without changing the result beyond the initial application.")),(0,o.kt)("h3",{id:"triggers"},"Triggers"),(0,o.kt)("p",null,"Reconcile is triggered by the following events: "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A resource has been created."),(0,o.kt)("li",{parentName:"ul"},"A resource has been updated."),(0,o.kt)("li",{parentName:"ul"},"A resource failed reconciliation and was requeued."),(0,o.kt)("li",{parentName:"ul"},"An object with an ",(0,o.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/concepts/overview/working-with-objects/owners-dependents/#owner-references-in-object-specifications"},(0,o.kt)("inlineCode",{parentName:"a"},"ownerReference")),"\nto the resource.")),(0,o.kt)("h3",{id:"example"},"Example"),(0,o.kt)("p",null,"In its simplest form, this is what the ",(0,o.kt)("inlineCode",{parentName:"p"},"ReconcileAsync")," method looks like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"public Task<ResourceControllerResult> ReconcileAsync(V1ExampleEntity resource)\n{\n    // TODO: apply logic\n\n    return ResourceControllerResult.Ok();\n}\n")),(0,o.kt)("h2",{id:"status-updates"},"Status Updates"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"StatusModifiedAsync")," is called when the status of a resource has changed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"public async Task StatusModifiedAsync(V1ExampleEntity resource)\n{\n    // react to status update\n}\n")),(0,o.kt)("h2",{id:"requeuing"},"Requeuing"),(0,o.kt)("p",null,"When a reconcile event throws an exception, it will be requeued. "),(0,o.kt)("h3",{id:"global-defaults"},"Global defaults"),(0,o.kt)("p",null,"Global defaults can be configured by setting ",(0,o.kt)("inlineCode",{parentName:"p"},"ResourceManagerOptions")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"ConfigureOperator"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'var k8s = KubernetesOperatorHost\n            .CreateDefaultBuilder()\n            .ConfigureOperator(configure =>\n            {\n                configure.Port = 443;\n                configure.AssemblyScanningEnabled = true;\n                configure.Name = "example-operator";\n                configure.Namespace = "default";\n                configure.ResourceManagerOptions = new ResourceManagerOptions()\n                {\n                    ErrorMaxRequeueInterval = TimeSpan.FromMinutes(1),\n                    ErrorMaxRetryCount      = 10,\n                    ErrorMinRequeueInterval = TimeSpan.FromSeconds(1)\n                };\n            })\n            .UseStartup<Startup>()\n            .Build();\n\nawait = k8s.RunAsync();\n')),(0,o.kt)("h3",{id:"controller-specific"},"Controller specific"),(0,o.kt)("p",null,"Controllers are configurable by passing ",(0,o.kt)("inlineCode",{parentName:"p"},"ResourceManagerOptions")," to your controller when calling ",(0,o.kt)("inlineCode",{parentName:"p"},"AddController")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"Startup.cs"),". "),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"To do this, assembly scanning should be disabled or add the ",(0,o.kt)("inlineCode",{parentName:"p"},"[Controller(Ignore = true)]")," attribute to the controller.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"using Neon.Kube.Operator;\nusing Neon.Kube.Operator.ResourceManager;\n\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddKubernetesOperator()\n            .AddController<ExampleController>(\n            options: new ResourceManagerOptions()\n            {\n                ErrorMaxRequeueInterval = TimeSpan.FromMinutes(1),\n                ErrorMaxRetryCount = 10,\n                ErrorMinRequeueInterval = TimeSpan.FromSeconds(1)\n            });\n}\n")),(0,o.kt)("h3",{id:"manual-requeue"},"Manual requeue"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"public Task<ResourceControllerResult> ReconcileAsync(V1ExampleEntity resource)\n{\n    return ResourceControllerResult.RequeueEvent(TimeSpan.FromSeconds(10));\n}\n")),(0,o.kt)("h2",{id:"leader-election"},"Leader election"),(0,o.kt)("h3",{id:"events"},"Events"),(0,o.kt)("p",null,"The following methods are provided for reacting to leadership events."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"public async Task OnPromotionAsync()\n{\n    // Controller was promoted to leader.\n}\n\npublic async Task OnDemotionAsync()\n{\n    // Controller is no longer leader.\n}\n\npublic async Task OnNewLeaderAsyncc(string identity)\n{\n    // There is a new leader. The identity of the new leader is given.\n}\n")),(0,o.kt)("h3",{id:"configuring"},"Configuring"),(0,o.kt)("p",null,"Leader election can be configured by setting ",(0,o.kt)("inlineCode",{parentName:"p"},"LeaderElectionConfig")," when adding a controller via ",(0,o.kt)("inlineCode",{parentName:"p"},"AddController")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"Startup.cs"),". "),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"To do this, assembly scanning should be disabled or add the ",(0,o.kt)("inlineCode",{parentName:"p"},"[Controller(Ignore = true)]")," attribute to the controller.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'using Neon.Kube;\nusing Neon.Kube.Operator;\n\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddKubernetesOperator()\n            .AddController<ExampleController>(\n                leaderConfig: new LeaderElectionConfig(\n                    k8s:           K8s,\n                    @namespace:    "default",\n                    leaseName:     $"example.controller",\n                    identity:      Pod.Name))\n}\n')),(0,o.kt)("h2",{id:"filtering"},"Filtering"),(0,o.kt)("p",null,"To filter out resources, add the optional ",(0,o.kt)("inlineCode",{parentName:"p"},"Filter")," method to the controller."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'public static bool Filter(V1ExampleResource resource)\n{\n    return (resource.Name() == "my-resource");\n}\n\n')),(0,o.kt)("h2",{id:"dependent-resources"},"Dependent Resources"),(0,o.kt)("p",null,"In many cases, an operator creates a bunch of Kubernetes resources in the cluster, as a result of reconciling a ",(0,o.kt)("inlineCode",{parentName:"p"},"Resource"),". For instance, the etcd-operator creates\ntwo services and a number of pods for a single EtcdCluster CR. In this case, all the Kubernetes resources created by the operator for a CR is defined as\ndependent resources. The etcd-operator may want to watch the pods that it created in case it needs to reconcile again."),(0,o.kt)("p",null," ",(0,o.kt)("inlineCode",{parentName:"p"},"DependentResources")," can be defined by adding an annotation to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Controller"),". "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"using Neon.Kube.Operator;\nusing Neon.Kube.Operator.Controller;\nusing Neon.Kube.Resources;\n\n[DependentResource<V1Pod>(Scope = EntityScope.Namespaced)]\n[DependentResource<V1Service>(Scope = EntityScope.Namespaced)]\npublic class EtcdController : IResourceController<V1EtcdCluster>\n{\n   // Controller implementation.\n}\n")),(0,o.kt)("p",null,"Controllers are configurable by setting ",(0,o.kt)("inlineCode",{parentName:"p"},"DependentResources")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"ResourceManagerOptions")," when adding a controller via ",(0,o.kt)("inlineCode",{parentName:"p"},"AddController")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"Startup.cs"),". "),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"To do this, assembly scanning should be disabled or add the ",(0,o.kt)("inlineCode",{parentName:"p"},"[Controller(Ignore = true)]")," attribute to the controller.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"using Neon.Kube.Operator;\nusing Neon.Kube.Operator.ResourceManager;\nusing Neon.Kube.Resources;\n\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddKubernetesOperator()\n        .AddController<EtcdController>(\n            options: new ResourceManagerOptions()\n            {\n                DependentResources = new List<IDependentResource>()\n                {\n                    new DependentResource<V1Pod>(scope: EntityScope.Namespaced),\n                    new DependentResource<V1Service>(scope: EntityScope.Namespaced)\n                }\n            });\n}\n\n")))}d.isMDXComponent=!0}}]);